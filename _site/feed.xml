<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2019-10-07T10:24:22+08:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">tuzhong007’s blog</title><subtitle>tuzhong007's blog</subtitle><entry><title type="html">Inclusion-exclusion</title><link href="http://localhost:4000/about%20cs/2019/10/06/Inclusion_and_exclusion.html" rel="alternate" type="text/html" title="Inclusion-exclusion" /><published>2019-10-06T00:00:00+08:00</published><updated>2019-10-06T00:00:00+08:00</updated><id>http://localhost:4000/about%20cs/2019/10/06/Inclusion_and_exclusion</id><content type="html" xml:base="http://localhost:4000/about%20cs/2019/10/06/Inclusion_and_exclusion.html">&lt;head&gt;
&lt;script type=&quot;text/javascript&quot; async=&quot;&quot; src=&quot;https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-MML-AM_CHTML&quot;&gt;
    &lt;/script&gt;
&lt;/head&gt;
&lt;p&gt;  The principle of inclusion-exclusion provides us with a technique for solving problems like couting. For example, how many numbers not exceeding &lt;script type=&quot;math/tex&quot;&gt;1000&lt;/script&gt; are divisible by &lt;script type=&quot;math/tex&quot;&gt;7&lt;/script&gt; or &lt;script type=&quot;math/tex&quot;&gt;11&lt;/script&gt;?&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;i&gt;solution&lt;/i&gt;: Let &lt;script type=&quot;math/tex&quot;&gt;A&lt;/script&gt; be the set of positive numbers which are not exceeding &lt;script type=&quot;math/tex&quot;&gt;1000&lt;/script&gt; and divisible by 7, and let &lt;script type=&quot;math/tex&quot;&gt;B&lt;/script&gt; be the set of positive numbers which are not exceeding &lt;script type=&quot;math/tex&quot;&gt;1000&lt;/script&gt; and divisible by 11. Define &lt;script type=&quot;math/tex&quot;&gt;\vert A\vert&lt;/script&gt; to be the number of elements in &lt;script type=&quot;math/tex&quot;&gt;A&lt;/script&gt;, we have&lt;/p&gt;

&lt;center&gt;

$$
\begin{equation}
    \begin{aligned}
        \vert A\cup B\vert&amp;amp;=\vert A\vert+\vert B\vert-\vert A\cap B\vert \\
        &amp;amp;=\lfloor \frac{1000}{7}\rfloor+\lfloor \frac{1000}{11}\rfloor-\lfloor \frac{1000}{7\times11}\rfloor \\
        &amp;amp;=220.
    \end{aligned}
\end{equation}
$$

&lt;/center&gt;

&lt;p&gt;  Thus, the answer should be &lt;script type=&quot;math/tex&quot;&gt;220&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;  In fact, there’s a theorem.
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Theorem(The principle of inclusion-exclusion) &lt;/strong&gt; Let &lt;script type=&quot;math/tex&quot;&gt;A_1, A_2, \dots, A_n&lt;/script&gt; be finite sets. Then&lt;/p&gt;

&lt;center&gt;

$$
\begin{equation}
    \begin{aligned}
    	\vert\bigcup_{i=1}^{n}A_i\vert&amp;amp;=\sum_{1\le i\le n}\vert A_i\vert -\sum_{1\le i&amp;lt;j\le n}\vert A_i\cap A_j\vert\\
    	&amp;amp;+\sum_{1\le i&amp;lt;j&amp;lt;k\le n}\vert A_i\cap A_j\cap A_k\vert-\cdots+(-1)^{n}\vert \bigcap_{i=1}^{n}A_i\vert.
    \end{aligned}
\end{equation}
$$

&lt;/center&gt;

&lt;p&gt;&lt;strong&gt;Sample&lt;/strong&gt;: &lt;a href=&quot;https://codeforces.com/contest/1228/problem/E&quot;&gt;[codeforces 1228E]Another filling the grid&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;  Let &lt;script type=&quot;math/tex&quot;&gt;S_{i,j}&lt;/script&gt; be a collection of situations with i rows and j colomns do not satisfy the condition, that is, for every grid in this i rows or j colomns, its value should be greater than 1. We could use a fomular to calculate this &lt;script type=&quot;math/tex&quot;&gt;\vert S_{i,j}\vert&lt;/script&gt;:&lt;/p&gt;

&lt;center&gt;

$$
\vert S_{i,j}\vert=C_{n}^{i}\times C_{n}^{j}\times (k-1)^{n(i+j)-ij}\times (k-1)^{n^2-n(i+j)+ij}
$$

&lt;/center&gt;

&lt;p&gt;  Now we want to obtain &lt;script type=&quot;math/tex&quot;&gt;\vert \bigcup_{i,j}S_{i,j}\vert&lt;/script&gt;. By observation, we know that &lt;script type=&quot;math/tex&quot;&gt;S_{i,j}=S_{i,0}\cap S_{0,j}&lt;/script&gt;,  &lt;script type=&quot;math/tex&quot;&gt;S_{i,0}\subset S_{j,0}&lt;/script&gt; if &lt;script type=&quot;math/tex&quot;&gt;% &lt;![CDATA[
j&lt;i %]]&gt;&lt;/script&gt;,  &lt;script type=&quot;math/tex&quot;&gt;S_{0,i}\subset S_{0,j}&lt;/script&gt; if &lt;script type=&quot;math/tex&quot;&gt;% &lt;![CDATA[
j&lt;i %]]&gt;&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;S_{i,j}\cap S_{k,l}=S_{i,0}\cap S_{0,j}\cap S_{k,0}\cap S_{0,l}=S_{max(i,k),max(j,l)}&lt;/script&gt;. In additional, given the theorem, we can figure out that every  &lt;script type=&quot;math/tex&quot;&gt;S_{i,j}&lt;/script&gt; contributes to &lt;script type=&quot;math/tex&quot;&gt;\vert \bigcup_{i,j}S_{i,j}\vert&lt;/script&gt; with the coefficient &lt;script type=&quot;math/tex&quot;&gt;(-1)^{i+j}&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;  Then apply the theorem, we get&lt;/p&gt;

&lt;center&gt;

$$
\vert \bigcup_{i,j}S_{i,j}\vert=\sum_{i=0}^{n}\sum_{j=0}^{n}(-1)^{i+j}\times C_{n}^{i}\times C_{n}^{j}\times (k-1)^{n(i+j)-ij}\times (k-1)^{n^2-n(i+j)+ij},
$$

&lt;/center&gt;

&lt;p&gt;note that &lt;script type=&quot;math/tex&quot;&gt;\vert S_{0,0}\vert&lt;/script&gt;, by fomular, equals to &lt;script type=&quot;math/tex&quot;&gt;k^n&lt;/script&gt;, which is the total number of ways to fill the grid. And therefore the answer would be this &lt;script type=&quot;math/tex&quot;&gt;\vert \bigcup_{i,j}S_{i,j}\vert&lt;/script&gt;. The time complexity of the algorithm should be &lt;script type=&quot;math/tex&quot;&gt;O(n^{2}logn)&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;  The answer is required to take mod. The law of addition and multiplication under mod operation is well known. But this time we used the formular &lt;script type=&quot;math/tex&quot;&gt;C_{n}^{i}=\frac{n!}{(n-i)!i!}&lt;/script&gt; to calculate combination, hence the inverse of an element is needed. There is a trick to find the inverse of an element: applying Fermat’s little theorem,&lt;/p&gt;

&lt;center&gt;

$$
a^{p-1}\equiv1(mod \hspace{0.2cm}p)
$$

&lt;/center&gt;

&lt;p&gt;where &lt;script type=&quot;math/tex&quot;&gt;p&lt;/script&gt; is prime, &lt;script type=&quot;math/tex&quot;&gt;(a,p)=1&lt;/script&gt;. Thus,&lt;/p&gt;

&lt;center&gt;

$$
a\times a^{p-2}\equiv 1(mod \hspace{0.2cm}p)
$$

&lt;/center&gt;

&lt;p&gt;i.e., &lt;script type=&quot;math/tex&quot;&gt;a^{p-2}&lt;/script&gt; is the inverse of &lt;script type=&quot;math/tex&quot;&gt;a&lt;/script&gt;.
&lt;br /&gt;
&lt;br /&gt;
my code:&lt;/p&gt;
&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include&amp;lt;bits/stdc++.h&amp;gt;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mod&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1e9&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;ll&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ll&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;ll&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ll&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ll&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;ll&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bas&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bas&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;bas&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bas&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bas&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;ll&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ginv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ll&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;ll&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fac&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Com&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;ll&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Ans&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getfac&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;fac&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;ll&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;fac&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getCom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;ll&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fac&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ginv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fac&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]));&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ginv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fac&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]));&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;Com&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//			printf(&quot;%lld &quot;,Com[i]);
&lt;/span&gt;		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getAns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;ll&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;coe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;coe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;ll&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sij&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Com&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Com&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;ll&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k_1p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;ll&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;sij&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sij&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k_1p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;sij&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sij&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;Ans&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Ans&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;coe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sij&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//				printf(&quot;%lld &quot;,sij*coe);
&lt;/span&gt;			&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;work&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;getfac&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;getCom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;getAns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%lld&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Ans&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;scanf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%d%d&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;work&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
 
&lt;span class=&quot;c1&quot;&gt;// printf(&quot;%lld&quot;,);
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><category term="about cs" /><summary type="html">  The principle of inclusion-exclusion provides us with a technique for solving problems like couting. For example, how many numbers not exceeding are divisible by or ?</summary></entry><entry><title type="html">norm space(SEQUENCE AND SERIES OF FUNCTIONS)</title><link href="http://localhost:4000/about%20math/2019/09/29/norm_space.html" rel="alternate" type="text/html" title="norm space(SEQUENCE AND SERIES OF FUNCTIONS)" /><published>2019-09-29T00:00:00+08:00</published><updated>2019-09-29T00:00:00+08:00</updated><id>http://localhost:4000/about%20math/2019/09/29/norm_space</id><content type="html" xml:base="http://localhost:4000/about%20math/2019/09/29/norm_space.html">&lt;head&gt;
&lt;script type=&quot;text/javascript&quot; async=&quot;&quot; src=&quot;https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-MML-AM_CHTML&quot;&gt;
    &lt;/script&gt;
&lt;/head&gt;

&lt;p&gt; After studying some global properties of series of functions, the concept of norm space furnished a new version to describe them.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;7.14 Definition&lt;/strong&gt; If &lt;script type=&quot;math/tex&quot;&gt;X&lt;/script&gt; is a metric space, &lt;script type=&quot;math/tex&quot;&gt;\mathscr{C}(X)&lt;/script&gt; will denote the set of all complex-valued, continuous, bounded    functions with domain &lt;script type=&quot;math/tex&quot;&gt;X&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;  We associate with each &lt;script type=&quot;math/tex&quot;&gt;f\in\mathscr{C}(X)&lt;/script&gt; its &lt;i&gt;supremum norm&lt;/i&gt;&lt;/p&gt;

&lt;center&gt;

$$
\Vert f\Vert=\sup\limits_{x\in X}\vert f(x)\vert.
$$

&lt;/center&gt;

&lt;p&gt;If &lt;script type=&quot;math/tex&quot;&gt;h=f+g&lt;/script&gt;, then&lt;/p&gt;

&lt;center&gt;

$$
\vert h(x)\vert \leq \vert f(x)\vert+\vert g(x)\vert\leq \vert f\vert+\vert g\vert
$$

&lt;/center&gt;

&lt;p&gt;for all &lt;script type=&quot;math/tex&quot;&gt;x\in X&lt;/script&gt;. Hence&lt;/p&gt;

&lt;center&gt;

$$
\Vert f+g\Vert \leq \Vert f\Vert+\Vert g\Vert.
$$

&lt;/center&gt;

&lt;p&gt;  If we define the distance between &lt;script type=&quot;math/tex&quot;&gt;f\in\mathscr{C}(X)&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;g\in\mathscr{C}(X)&lt;/script&gt; to be &lt;script type=&quot;math/tex&quot;&gt;\Vert f-g\Vert&lt;/script&gt;, it follows that &lt;script type=&quot;math/tex&quot;&gt;\mathscr{C}(X)&lt;/script&gt; becomes a metric space.&lt;/p&gt;

&lt;p&gt;  A new version mentioned above, is that we can restate some previous theorems as follows:&lt;/p&gt;

&lt;p&gt;  &lt;i&gt;A sequence &lt;script type=&quot;math/tex&quot;&gt;\{f_n\}&lt;/script&gt; converges to f with respect to the metric of &lt;script type=&quot;math/tex&quot;&gt;\mathscr{C}(X)&lt;/script&gt; if and only if &lt;script type=&quot;math/tex&quot;&gt;f_n\rightarrow f&lt;/script&gt; uniformly on &lt;script type=&quot;math/tex&quot;&gt;X&lt;/script&gt;.&lt;/i&gt;&lt;/p&gt;

&lt;p&gt;  This is an example of the &lt;i&gt;supremum norm&lt;/i&gt;.  We could also define some different norms, like:&lt;/p&gt;

&lt;center&gt;


$$
\Vert f\Vert=(\int_{0}^{1}\vert f(x)\vert^{p}dx)^{1/p},
$$
&lt;/center&gt;

&lt;p&gt;where &lt;script type=&quot;math/tex&quot;&gt;X=[0,1]&lt;/script&gt;.&lt;/p&gt;</content><author><name></name></author><category term="about math" /><summary type="html"></summary></entry><entry><title type="html">Construction Ideas(THE RIEMANN-STIETJES INTEGRAL)</title><link href="http://localhost:4000/about%20math/2019/09/01/CI_Riemann_Integral.html" rel="alternate" type="text/html" title="Construction Ideas(THE RIEMANN-STIETJES INTEGRAL)" /><published>2019-09-01T00:00:00+08:00</published><updated>2019-09-01T00:00:00+08:00</updated><id>http://localhost:4000/about%20math/2019/09/01/CI_Riemann_Integral</id><content type="html" xml:base="http://localhost:4000/about%20math/2019/09/01/CI_Riemann_Integral.html">&lt;head&gt;
&lt;script type=&quot;text/javascript&quot; async=&quot;&quot; src=&quot;https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-MML-AM_CHTML&quot;&gt;
    &lt;/script&gt;
&lt;/head&gt;

&lt;p&gt;&lt;strong&gt;6.6 Theorem&lt;/strong&gt; &lt;i&gt;Suppose &lt;script type=&quot;math/tex&quot;&gt;\alpha&lt;/script&gt; is a monotonically increasing function on &lt;script type=&quot;math/tex&quot;&gt;[a,b]&lt;/script&gt;.  f &lt;script type=&quot;math/tex&quot;&gt;\in \mathscr{R}(\alpha)&lt;/script&gt; on &lt;script type=&quot;math/tex&quot;&gt;[a,b]&lt;/script&gt; if and only if for every &lt;script type=&quot;math/tex&quot;&gt;\epsilon&gt;0&lt;/script&gt; there exists a partition P such that&lt;/i&gt;&lt;/p&gt;

&lt;center&gt;

$$
\begin{equation}
	U(P,f,\alpha)-L(P,f,\alpha)&amp;lt;\epsilon.
\end{equation}
$$

&lt;/center&gt;

&lt;p&gt;  This theorem provides a fundamental idea about solving questions like “how to check a function to be Riemann-integrable or not”. By definition, we have&lt;/p&gt;

&lt;center&gt;

$$
U(P,f,\alpha)-L(P,f,\alpha)=\sum\limits_{i=1}^{n}(M_i-m_i)\Delta\alpha_{i},
$$

&lt;/center&gt;

&lt;p&gt;where for a partition P,&lt;/p&gt;

&lt;center&gt;

$$
\begin{equation}
\begin{aligned}
M_i&amp;amp;=\sup f(x) \hspace{1cm}(x_{i-1}\leq x \leq x_{i}), \\
m_i&amp;amp;=\inf f(x) \hspace{1cm}(x_{i-1}\leq x \leq x_{i}), \\
\Delta\alpha_{i}&amp;amp;=\alpha(x_{i})-\alpha(x_{i-1}).
\end{aligned}
\end{equation}
$$

&lt;/center&gt;

&lt;p&gt;  Given &lt;script type=&quot;math/tex&quot;&gt;\epsilon&gt;0&lt;/script&gt;. Naturally, we could imagine that if &lt;script type=&quot;math/tex&quot;&gt;f&lt;/script&gt; is Riemann-integrable, then &lt;script type=&quot;math/tex&quot;&gt;\sum\limits_{i=1}^{n}(M_i-m_i)\Delta\alpha_{i}&lt;/script&gt; should be small enough for some partition P. We hope to construct some P which meet the requirement.&lt;/p&gt;

&lt;p&gt;  There is an idea on constructing a suitable P. For each term, we either make &lt;script type=&quot;math/tex&quot;&gt;(M_i-m_i)&lt;/script&gt; or &lt;script type=&quot;math/tex&quot;&gt;\Delta\alpha_{i}&lt;/script&gt; small. Then this P may suffice.&lt;/p&gt;

&lt;p&gt;  The proof of the theorem below should be an example.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6.8 Theorem&lt;/strong&gt; &lt;i&gt;If f is continuous on &lt;script type=&quot;math/tex&quot;&gt;[a, b]&lt;/script&gt; then f &lt;script type=&quot;math/tex&quot;&gt;\in \mathscr{R}(\alpha)&lt;/script&gt; on &lt;script type=&quot;math/tex&quot;&gt;[a,b]&lt;/script&gt;.&lt;/i&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Proof&lt;/strong&gt; Given &lt;script type=&quot;math/tex&quot;&gt;\epsilon&gt;0&lt;/script&gt;. Since &lt;script type=&quot;math/tex&quot;&gt;f&lt;/script&gt; is continuous, and &lt;script type=&quot;math/tex&quot;&gt;[a,b]&lt;/script&gt; is compact, we know &lt;script type=&quot;math/tex&quot;&gt;f&lt;/script&gt; is uniformly continuous, i.e., given &lt;script type=&quot;math/tex&quot;&gt;\epsilon&gt;0&lt;/script&gt;, there exist a &lt;script type=&quot;math/tex&quot;&gt;\delta&gt;0&lt;/script&gt; such that &lt;script type=&quot;math/tex&quot;&gt;\forall x,y\in [a,b]&lt;/script&gt;, if &lt;script type=&quot;math/tex&quot;&gt;% &lt;![CDATA[
d(x,y)&lt;\delta %]]&gt;&lt;/script&gt;, then &lt;script type=&quot;math/tex&quot;&gt;% &lt;![CDATA[
d(f(x),f(y))&lt;\epsilon %]]&gt;&lt;/script&gt;. Hence, if we choose a partition with &lt;script type=&quot;math/tex&quot;&gt;% &lt;![CDATA[
\Delta\alpha_{i}&lt;\delta %]]&gt;&lt;/script&gt;, then &lt;script type=&quot;math/tex&quot;&gt;% &lt;![CDATA[
(M_i-m_i)&lt;\epsilon %]]&gt;&lt;/script&gt;. We thus get&lt;/p&gt;

&lt;center&gt;

$$
\begin{equation}
\begin{aligned}
U(P,f,\alpha)-L(P,f,\alpha)&amp;amp;=\sum\limits_{i=1}^{n}(M_i-m_i)\Delta\alpha_{i} \\
&amp;amp;&amp;lt; \epsilon\sum\limits_{i=1}^{n}\Delta\alpha_{i} \\
&amp;amp;= \epsilon (\alpha(b)-\alpha(a)).
\end{aligned}
\end{equation}
$$

&lt;/center&gt;

&lt;p&gt;Since &lt;script type=&quot;math/tex&quot;&gt;\epsilon&lt;/script&gt; is arbitrary, for each &lt;script type=&quot;math/tex&quot;&gt;\eta&gt;0&lt;/script&gt;, we pick &lt;script type=&quot;math/tex&quot;&gt;\epsilon&lt;/script&gt; which satisfy the inequality &lt;script type=&quot;math/tex&quot;&gt;% &lt;![CDATA[
\epsilon (\alpha(b)-\alpha(a))&lt;\eta %]]&gt;&lt;/script&gt; . We finally get&lt;/p&gt;

&lt;center&gt;

$$
\begin{equation}
\begin{aligned}
U(P,f,\alpha)-L(P,f,\alpha)&amp;lt;\eta,
\end{aligned}
\end{equation}
$$

&lt;/center&gt;

&lt;p&gt;and therefore &lt;script type=&quot;math/tex&quot;&gt;f\in \mathscr{R(\alpha)}&lt;/script&gt;.&lt;/p&gt;</content><author><name></name></author><category term="about math" /><summary type="html"></summary></entry><entry><title type="html">test2</title><link href="http://localhost:4000/about%20math/2019/08/11/test2.html" rel="alternate" type="text/html" title="test2" /><published>2019-08-11T00:00:00+08:00</published><updated>2019-08-11T00:00:00+08:00</updated><id>http://localhost:4000/about%20math/2019/08/11/test2</id><content type="html" xml:base="http://localhost:4000/about%20math/2019/08/11/test2.html">&lt;head&gt;
&lt;script type=&quot;text/javascript&quot; async=&quot;&quot; src=&quot;https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-MML-AM_CHTML&quot;&gt;
    &lt;/script&gt;
&lt;/head&gt;

&lt;p&gt;I want to display diverse kinds of mathematics formular in this blog, so I will try to work out some exercises of baby rudin as samples.
&lt;br /&gt;&lt;br /&gt;
&lt;strong&gt;Sample 1(exercise 4.2):&lt;/strong&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;If &lt;script type=&quot;math/tex&quot;&gt;f&lt;/script&gt; is a continuous mapping of a metric space &lt;script type=&quot;math/tex&quot;&gt;X&lt;/script&gt; into a metric space &lt;script type=&quot;math/tex&quot;&gt;Y&lt;/script&gt;, prove that &lt;br /&gt;&lt;/p&gt;
&lt;center&gt;
$$
\begin{equation}
	f(\overline{E})\subset \overline{f(E)}
\end{equation}
$$
&lt;/center&gt;
&lt;p&gt;for every set &lt;script type=&quot;math/tex&quot;&gt;E\subset X&lt;/script&gt;. (&lt;script type=&quot;math/tex&quot;&gt;\overline{E}&lt;/script&gt; denotes the closure of &lt;script type=&quot;math/tex&quot;&gt;E&lt;/script&gt;.) Show, by an example, that &lt;script type=&quot;math/tex&quot;&gt;f(\overline{E})&lt;/script&gt; can be a proper subset of &lt;script type=&quot;math/tex&quot;&gt;\overline{f(E)}&lt;/script&gt;.
&lt;br /&gt;&lt;br /&gt;
&lt;strong&gt;Solution:&lt;/strong&gt;&lt;br /&gt;
Since &lt;script type=&quot;math/tex&quot;&gt;\overline{f(E)}&lt;/script&gt; is closed, &lt;script type=&quot;math/tex&quot;&gt;f^{-1}[\overline{f(E)}]&lt;/script&gt; is closed. Since 
&lt;script type=&quot;math/tex&quot;&gt;E\subset f^{-1}[\overline{f(E)}]&lt;/script&gt;, we have &lt;script type=&quot;math/tex&quot;&gt;\overline{E}\subset f^{-1}[\overline{f(E)}]&lt;/script&gt;, thus &lt;script type=&quot;math/tex&quot;&gt;f(\overline{E})\subset \overline{f(E)}&lt;/script&gt;.
&lt;br /&gt;
Next, let &lt;script type=&quot;math/tex&quot;&gt;X&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;Y&lt;/script&gt; be &lt;script type=&quot;math/tex&quot;&gt;R^1&lt;/script&gt;, &lt;script type=&quot;math/tex&quot;&gt;E=\{x|x\in N^{*}\}&lt;/script&gt;, and &lt;script type=&quot;math/tex&quot;&gt;f(x)=\frac{1}{x}&lt;/script&gt;. Then &lt;script type=&quot;math/tex&quot;&gt;f&lt;/script&gt; is continuous, and &lt;script type=&quot;math/tex&quot;&gt;f(\overline{E})=\{\frac{1}{x}|x\in N^{*}\}&lt;/script&gt;,  while &lt;script type=&quot;math/tex&quot;&gt;\overline{f(E)}=\{\frac{1}{x}|x\in N^{*}\}\cup \{0\}&lt;/script&gt;. Hence &lt;script type=&quot;math/tex&quot;&gt;f(\overline{E})&lt;/script&gt; is a proper subset of &lt;script type=&quot;math/tex&quot;&gt;\overline{f(E)}&lt;/script&gt;.
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sample 2(Exercise 3.14 (a)):&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If &lt;script type=&quot;math/tex&quot;&gt;s_n&lt;/script&gt; is a complex sequence, define its arithmetic means &lt;script type=&quot;math/tex&quot;&gt;\sigma_n&lt;/script&gt; by&lt;/p&gt;
&lt;center&gt;
$$
\begin{equation}
		\sigma _n=\frac{s_0+s_1+\cdot\cdot\cdot+s_n}{n+1}\hspace{1cm} (n=0,1,2,...).
\end{equation}
$$
&lt;/center&gt;
&lt;p&gt;If &lt;script type=&quot;math/tex&quot;&gt;\lim{s_n}=s&lt;/script&gt;, prove that &lt;script type=&quot;math/tex&quot;&gt;\lim{\sigma_n}=s&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Solution:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Given an &lt;script type=&quot;math/tex&quot;&gt;\epsilon_0&gt;0&lt;/script&gt;.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;script type=&quot;math/tex&quot;&gt;\lim{s_n}=s&lt;/script&gt;, that is to say, &lt;script type=&quot;math/tex&quot;&gt;\forall \epsilon_1&gt;0&lt;/script&gt;, &lt;script type=&quot;math/tex&quot;&gt;\exists N_1&gt;0&lt;/script&gt;, s.t. &lt;script type=&quot;math/tex&quot;&gt;\forall n\geq N_1&lt;/script&gt;, &lt;script type=&quot;math/tex&quot;&gt;% &lt;![CDATA[
\mid s_n-s\mid &lt;\epsilon_1(1) %]]&gt;&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;We noticed that&lt;/p&gt;

&lt;center&gt;

$$
\begin{equation}
	|\sigma_n-s|=|\frac{\sum_{i=0}^{n}s_i-s}{n+1}|\leq \frac{\sum_{i=0}^{n}|s_i-s|}{n+1}
\end{equation}
$$

&lt;/center&gt;

&lt;p&gt;We now let &lt;script type=&quot;math/tex&quot;&gt;\epsilon_1=\frac{\epsilon_0}{2}&lt;/script&gt;, and then apply (1). Now we have&lt;/p&gt;

&lt;center&gt;

$$
\begin{equation}
	\begin{aligned}
		|\sigma_n-s|&amp;amp;\leq \frac{\sum_{i=0}^{N_1-1}|s_i-s|+\sum_{i=N_1}^{n}|s_i-s|}{n+1}\\
		&amp;amp;\leq \frac{\sum_{i=0}^{N_1-1}|s_i-s|+(n-N_1+1)\epsilon_1}{n+1}\\
		&amp;amp;\leq \frac{\sum_{i=0}^{N_1-1}|s_i-s|}{n+1}+\frac{\epsilon_0}{2}
	\end{aligned}	
\end{equation}
$$
&lt;/center&gt;
&lt;p&gt;if &lt;script type=&quot;math/tex&quot;&gt;n\geq N_1&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;Put &lt;script type=&quot;math/tex&quot;&gt;A_n=\frac{\sum_{i=0}^{N_1-1}\mid s_i-s \mid}{n+1}&lt;/script&gt;. We can see &lt;script type=&quot;math/tex&quot;&gt;\lim A_n=0&lt;/script&gt;, i.e., &lt;script type=&quot;math/tex&quot;&gt;\forall \epsilon_2&gt;0&lt;/script&gt;, &lt;script type=&quot;math/tex&quot;&gt;\exists N_2&gt;0&lt;/script&gt;, s.t. &lt;script type=&quot;math/tex&quot;&gt;\forall n\geq N_2&lt;/script&gt;, &lt;script type=&quot;math/tex&quot;&gt;% &lt;![CDATA[
A_n&lt;\epsilon_2(2) %]]&gt;&lt;/script&gt;. Then we let &lt;script type=&quot;math/tex&quot;&gt;\epsilon_2=\frac{\epsilon_0}{2}&lt;/script&gt;, and &lt;script type=&quot;math/tex&quot;&gt;N_0=max\{N_1,N_2\}&lt;/script&gt;. Hence, &lt;script type=&quot;math/tex&quot;&gt;\mid\sigma_n-s\mid \leq A_n+\frac{\epsilon_0}{2}\leq \frac{\epsilon_0}{2}+\frac{\epsilon_0}{2}=\epsilon_0&lt;/script&gt;, if &lt;script type=&quot;math/tex&quot;&gt;n\geq N_0&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;Thus we obtain the conclusion that &lt;script type=&quot;math/tex&quot;&gt;\forall \epsilon_0&gt;0&lt;/script&gt;, &lt;script type=&quot;math/tex&quot;&gt;\exists N_0&gt;0&lt;/script&gt;, s.t. &lt;script type=&quot;math/tex&quot;&gt;\forall n\geq N_0&lt;/script&gt;, &lt;script type=&quot;math/tex&quot;&gt;% &lt;![CDATA[
\mid\sigma_n-s\mid&lt;\epsilon_0 %]]&gt;&lt;/script&gt;, which means that &lt;script type=&quot;math/tex&quot;&gt;\lim{\sigma_n}=s&lt;/script&gt;.&lt;/p&gt;</content><author><name></name></author><category term="about math" /><summary type="html"></summary></entry><entry><title type="html">test1</title><link href="http://localhost:4000/about%20math/2019/08/10/test1.html" rel="alternate" type="text/html" title="test1" /><published>2019-08-10T23:45:59+08:00</published><updated>2019-08-10T23:45:59+08:00</updated><id>http://localhost:4000/about%20math/2019/08/10/test1</id><content type="html" xml:base="http://localhost:4000/about%20math/2019/08/10/test1.html">&lt;head&gt;
&lt;script type=&quot;text/javascript&quot; async=&quot;&quot; src=&quot;https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-MML-AM_CHTML&quot;&gt;
    &lt;/script&gt;
&lt;/head&gt;

&lt;p&gt;Try to solve the equation &lt;script type=&quot;math/tex&quot;&gt;x+1=2&lt;/script&gt;:&lt;/p&gt;
&lt;center&gt;
$$
\begin{equation}
	\begin{aligned}
		x+1&amp;amp;=2 \\
		x+1-1&amp;amp;=2-1 \\
		x&amp;amp;=1\\
	\end{aligned}
\end{equation}
$$
&lt;/center&gt;
&lt;p&gt;Then we get &lt;script type=&quot;math/tex&quot;&gt;x=1&lt;/script&gt;.&lt;/p&gt;</content><author><name></name></author><category term="about math" /><summary type="html"></summary></entry></feed>